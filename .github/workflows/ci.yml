name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Build frontend
        run: |
          cd ui
          npm install
          npm run build
          npm run dev &

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ui

  build-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout backend code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn -DskipTests clean install

      - name: Build backend
        run: mvn -DskipTests clean package

      - name: Upload backend JAR
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: target/*.jar

  build-docker-image:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download backend JAR
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: target/*.jar

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: .

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: vikku26
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push Backend Image
        run: |
          docker build -t vikku26/data-visualizer-backend:latest -f Dockerfile.backend .
          docker push vikku26/data-visualizer-backend:latest

      - name: Build and Push Frontend Image
        run: |
          docker build -t vikku26/data-visualizer-frontend:latest -f Dockerfile.frontend .
          docker push vikku26/data-visualizer-frontend:latest

  deploy:
    needs: [build-docker-image]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploying both Imges
        run: |
            docker-compose up --build

      # Example deployment step (replace with your actual deployment logic)
      - name: Deploy to Server (placeholder)
        run: echo "Deploying application..."
        # Add your deployment commands here, e.g., scp, rsync, kubectl, etc.