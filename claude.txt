# Data Visualization Platform - REST API Design

## 1. File Management APIs

### Upload Data File
```http
POST /api/v1/files/upload
Content-Type: multipart/form-data

Body:
- file: (binary) - CSV/Excel/PDF file
- metadata: (JSON) - Optional metadata about the file
```

**Response:**
```json
{
  "fileId": "uuid-string",
  "fileName": "population_data.csv",
  "fileSize": 2048576,
  "fileType": "CSV",
  "uploadTimestamp": "2025-06-26T10:30:00Z",
  "status": "UPLOADED",
  "columnsDetected": ["country", "state", "district", "population", "literacy_rate"]
}
```

### Get File Processing Status
```http
GET /api/v1/files/{fileId}/status
```

**Response:**
```json
{
  "fileId": "uuid-string",
  "status": "PROCESSING|COMPLETED|FAILED",
  "progress": 85,
  "message": "Parsing geographical data...",
  "processedRecords": 1250,
  "totalRecords": 1500,
  "errors": []
}
```

### List Uploaded Files
```http
GET /api/v1/files?page=0&size=10&sortBy=uploadDate&sortDir=desc
```

### Delete File
```http
DELETE /api/v1/files/{fileId}
```

## 2. Data Mapping & Configuration APIs

### Configure Data Mapping
```http
POST /api/v1/datasets/{fileId}/mapping
```

**Request Body:**
```json
{
  "columnMappings": {
    "country": "Country Name",
    "state": "State/Province",
    "district": "District",
    "population": "Population Count",
    "literacy": "Literacy Rate (%)"
  },
  "dataTypes": {
    "population": "INTEGER",
    "literacy": "DECIMAL"
  },
  "geographicalLevel": "DISTRICT", // COUNTRY, STATE, DISTRICT
  "coordinateSystem": "WGS84"
}
```

### Get Data Preview
```http
GET /api/v1/datasets/{fileId}/preview?rows=10&columns=country,state,population
```

**Response:**
```json
{
  "columns": ["country", "state", "district", "population", "literacy"],
  "data": [
    ["India", "Bihar", "Patna", 5838465, 70.68],
    ["India", "Bihar", "Gaya", 4379383, 63.80]
  ],
  "totalRows": 15000,
  "dataTypes": {
    "population": "INTEGER",
    "literacy": "DECIMAL"
  }
}
```

## 3. Geographical Data APIs

### Get Administrative Boundaries
```http
GET /api/v1/geography/boundaries?level=district&country=India&state=Bihar
```

**Response:**
```json
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Patna",
        "level": "district",
        "country": "India",
        "state": "Bihar"
      },
      "geometry": {
        "type": "Polygon",
        "coordinates": [[[85.0, 25.5], [85.5, 25.5], [85.5, 26.0], [85.0, 26.0], [85.0, 25.5]]]
      }
    }
  ]
}
```

### Search Geographical Locations
```http
GET /api/v1/geography/search?q=patna&level=district&limit=10
```

### Get Coordinate Information
```http
POST /api/v1/geography/geocode
```

**Request Body:**
```json
{
  "locations": [
    {"country": "India", "state": "Bihar", "district": "Patna"},
    {"country": "India", "state": "Bihar", "district": "Gaya"}
  ]
}
```

## 4. Visualization Configuration APIs

### Create Visualization
```http
POST /api/v1/visualizations
```

**Request Body:**
```json
{
  "name": "Bihar Population Density 2024",
  "description": "Population and literacy data visualization for Bihar districts",
  "datasetId": "file-uuid",
  "visualizationType": "CHOROPLETH", // HEATMAP, BUBBLE, MARKER
  "configuration": {
    "colorColumn": "population",
    "colorScheme": "Blues",
    "colorScale": "LINEAR", // LOG, SQRT
    "sizeColumn": "literacy",
    "tooltipColumns": ["district", "population", "literacy"],
    "legendTitle": "Population Count",
    "opacity": 0.8,
    "borderColor": "#333333",
    "borderWidth": 1
  },
  "mapSettings": {
    "center": {"lat": 25.0961, "lng": 85.3131},
    "zoom": 7,
    "mapStyle": "TERRAIN" // SATELLITE, ROADMAP, HYBRID
  }
}
```

**Response:**
```json
{
  "visualizationId": "viz-uuid",
  "name": "Bihar Population Density 2024",
  "status": "CREATED",
  "shareUrl": "https://yourapp.com/viz/viz-uuid",
  "embedCode": "<iframe src='https://yourapp.com/embed/viz-uuid' width='800' height='600'></iframe>"
}
```

### Update Visualization
```http
PUT /api/v1/visualizations/{vizId}
```

### Get Visualization Data
```http
GET /api/v1/visualizations/{vizId}/data
```

**Response:**
```json
{
  "type": "FeatureCollection",
  "metadata": {
    "totalFeatures": 38,
    "dataRange": {
      "population": {"min": 874919, "max": 5838465},
      "literacy": {"min": 45.2, "max": 80.1}
    },
    "colorScheme": "Blues",
    "legend": [
      {"color": "#f7fbff", "range": "< 1M", "count": 15},
      {"color": "#c6dbef", "range": "1M - 2M", "count": 12},
      {"color": "#6baed6", "range": "2M - 3M", "count": 8},
      {"color": "#2171b5", "range": "> 3M", "count": 3}
    ]
  },
  "features": [
    {
      "type": "Feature",
      "properties": {
        "district": "Patna",
        "population": 5838465,
        "literacy": 70.68,
        "colorValue": "#2171b5",
        "tooltip": "Patna: Population 5.84M, Literacy 70.7%"
      },
      "geometry": { /* GeoJSON geometry */ }
    }
  ]
}
```

## 5. Dashboard & Analytics APIs

### List User Visualizations
```http
GET /api/v1/visualizations?userId={userId}&page=0&size=10
```

### Get Visualization Analytics
```http
GET /api/v1/visualizations/{vizId}/analytics
```

**Response:**
```json
{
  "views": 1250,
  "shares": 45,
  "lastAccessed": "2025-06-26T09:15:00Z",
  "topRegions": ["Patna", "Gaya", "Muzaffarpur"],
  "dataQualityScore": 0.95,
  "performanceMetrics": {
    "loadTime": 850,
    "renderTime": 320
  }
}
```

## 6. Export & Sharing APIs

### Export Visualization
```http
POST /api/v1/visualizations/{vizId}/export
```

**Request Body:**
```json
{
  "format": "PNG", // PDF, SVG, JSON
  "width": 1920,
  "height": 1080,
  "dpi": 300,
  "includeData": true
}
```

### Generate Share Link
```http
POST /api/v1/visualizations/{vizId}/share
```

**Request Body:**
```json
{
  "expiryDays": 30,
  "permissions": ["VIEW"], // EDIT, DOWNLOAD
  "password": "optional-password"
}
```

## 7. Data Quality & Validation APIs

### Validate Data Quality
```http
POST /api/v1/datasets/{fileId}/validate
```

**Response:**
```json
{
  "overallScore": 0.87,
  "issues": [
    {
      "type": "MISSING_COORDINATES",
      "severity": "WARNING",
      "affectedRows": 25,
      "description": "Some districts could not be geocoded",
      "suggestions": ["Check district name spelling", "Provide manual coordinates"]
    },
    {
      "type": "OUTLIER_VALUES",
      "severity": "INFO",
      "affectedRows": 3,
      "description": "Population values seem unusually high",
      "suggestions": ["Verify data source", "Check for data entry errors"]
    }
  ],
  "statistics": {
    "totalRows": 1500,
    "validRows": 1475,
    "duplicateRows": 12,
    "missingValues": 38
  }
}
```

## 8. Template & Preset APIs

### Get Visualization Templates
```http
GET /api/v1/templates?category=demographic&region=india
```

### Save as Template
```http
POST /api/v1/templates
```

**Request Body:**
```json
{
  "name": "Indian District Demographics",
  "description": "Standard template for Indian district-level demographic data",
  "baseVisualizationId": "viz-uuid",
  "requiredColumns": ["district", "population", "literacy"],
  "isPublic": true
}
```

## Key Design Considerations

### 1. File Processing Pipeline
- **Asynchronous Processing**: Large files should be processed asynchronously
- **Progress Tracking**: Real-time progress updates via WebSocket or polling
- **Error Handling**: Detailed error messages with suggestions for fixes
- **Format Support**: Robust parsers for CSV, Excel (XLSX/XLS), and PDF text extraction

### 2. Geographical Data Management
- **Boundary Data**: Store administrative boundaries in PostGIS or similar
- **Geocoding Service**: Integration with services like Google Geocoding API or Nominatim
- **Coordinate Systems**: Support multiple coordinate reference systems
- **Data Sources**: OpenStreetMap, Natural Earth, government boundary datasets

### 3. Performance Optimization
- **Caching**: Redis for frequently accessed geographical boundaries
- **Data Compression**: GZip responses, optimized GeoJSON
- **Pagination**: For large datasets and search results
- **CDN**: Serve static map tiles and assets via CDN

### 4. Security & Validation
- **File Size Limits**: Maximum file sizes (e.g., 50MB)
- **File Type Validation**: MIME type checking and content validation
- **Rate Limiting**: API rate limits to prevent abuse
- **Data Sanitization**: Clean user input to prevent injection attacks

### 5. Database Schema Recommendations
```sql
-- Files table
files (id, name, type, size, upload_date, user_id, status, metadata)

-- Datasets table
datasets (id, file_id, column_mappings, row_count, processed_date)

-- Visualizations table
visualizations (id, name, dataset_id, config_json, created_date, user_id)

-- Geographical boundaries (PostGIS)
boundaries (id, name, level, country, state, district, geometry, metadata)
```

### 6. Error Response Format
```json
{
  "error": {
    "code": "INVALID_FILE_FORMAT",
    "message": "The uploaded file format is not supported",
    "details": "Only CSV, Excel (.xlsx, .xls) and PDF files are allowed",
    "timestamp": "2025-06-26T10:30:00Z",
    "requestId": "req-uuid"
  }
}
```